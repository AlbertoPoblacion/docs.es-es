### YamlMime:Tutorial
title: Explorar C# 7.0 (tutorial interactivo de C#)
metadata:
  title: 'Explorar C# 7.0: pruebe las nuevas características de C# 7.0 de forma interactiva mediante el explorador'
  description: En este tutorial se usa el explorador para examinar C# 7.0 de forma interactiva. Se estudian los nuevos giros que se pueden usar con C# 7.0 y que permiten que el código sea más conciso y legible.
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70f4e93460c69b54702f160d502163827ec73218
  ms.sourcegitcommit: 0aca6c5d166d7961a1e354c248495645b97a1dc5
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 03/30/2019
  ms.locfileid: "58675528"
items:
- durationInMinutes: 1
  content: >
    Este tutorial permite examinar las características de C# 7.0 de forma interactiva mediante el uso del explorador para escribir C# y ver los resultados de la compilación y la ejecución del código. Contiene una serie de lecciones que modifican procedimientos antiguos de C# para usar características más recientes y concisas de C# 7.0. El resto de este artículo proporciona información general de cada una de estas características, con un vínculo para examinar cada una.
- title: Declaraciones de variable out en la ubicación de la asignación
  durationInMinutes: 2
  content: "En esta versión se ha mejorado la sintaxis existente que admite parámetros `out`. Haga clic en el botón *Entrar en el modo de enfoque* situado en la parte inferior de esta página y pruebe el código siguiente en la ventana interactiva: \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\nAhora puede declarar variables `out` en la lista de argumentos de una llamada a método, en lugar de escribir una instrucción de declaración distinta. Puede mover la declaración a la llamada de método. Agregue el código siguiente en la parte inferior de la ventana interactiva:\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\nPuede cambiar la declaración `int` a una declaración `var`. Agregue el código siguiente a la ventana interactiva:\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\nLa nueva sintaxis ofrece dos ventajas importantes con respecto a la sintaxis existente:\n\n* El código es más fácil de leer. \n    - Declare la variable out donde la use, no en otra línea anterior.\n* No es preciso asignar ningún valor inicial.\n    - Al declarar la variable `out` donde se usa en una llamada a método, no podrá usarla accidentalmente antes de que se asigne.\n\nEl ámbito de la variable declarada es el ámbito que contiene la instrucción `if`. Esto permite usar la variable después. Modifique el último bloque `if` como se muestra en el siguiente fragmento de código.\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: Las tuplas crean estructuras de datos ligeros
  durationInMinutes: 1
  content: "Las tuplas son estructuras de datos ligeros que contienen varios campos para representar los miembros de datos. Los campos no se validan y no se pueden definir métodos propios.\n\n> [!NOTE]\n> Las tuplas estaban disponibles antes de C# 7.0, pero no eran eficientes ni compatibles con ningún lenguaje. Esto significaba que solo se podía hacer referencia a los elementos tupla como `Item1`, `Item2`, por ejemplo. C# 7.0 presenta compatibilidad de lenguaje con las tuplas, que permite usar nombres semánticos en los campos de una tupla mediante tipos de tupla nuevos y más eficientes.\n\nPara crear una tupla, asigne un valor a cada miembro con nombre:\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\nLa tupla `namedLetters` contiene campos denominados `Alpha` y `Beta`. Esos nombres solo existen en tiempo de compilación y no se conservan en tiempo de ejecución (por ejemplo, al inspeccionar la tupla mediante el uso de la reflexión).\n\nEn la asignación de una tupla, también pueden especificarse los nombres de los campos a la derecha de la asignación: \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\nPuede especificar nombres para los campos a la izquierda y la derecha de la asignación, pero los campos situados a la derecha se omiten.\n\nLas tuplas resultan más útiles como tipos de valor devuelto para los métodos `private` y `internal`. Las tuplas proporcionan una sintaxis sencilla para que esos métodos devuelvan varios valores discretos.\n\nLa creación de tuplas resulta más eficiente y productiva que la creación de clases o estructuras. Tiene una sintaxis ligera y más sencilla para definir una estructura de datos que incluya más de un valor. El siguiente método de ejemplo devuelve los valores mínimos y máximos de una secuencia de enteros:\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\nPuede que a veces quiera desempaquetar los miembros de una tupla devueltos de un método.  Para ello, declare distintas variables para cada uno de los valores de la tupla. Esto se denomina *deconstruir* la tupla. Agregue el código siguiente en el explorador para probarlo:\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\nAl trabajar con tuplas, a menudo se encontrará con que no usa todos los miembros de un resultado de la tupla. Cuando esto ocurra, puede descartar uno o varios valores devueltos mediante el uso de `_` en lugar de una variable. Agregue el código siguiente en el explorador para probarlo:\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\nPuede obtener más información sobre las tuplas en el [artículo sobre tuplas](../../tuples.md).\nPuede obtener más información sobre los descartes en el [artículo sobre descartes](../../discards.md).\n"
- title: Uso del patrón de tipo con la expresión is
  durationInMinutes: 2
  content: >
    La expresión de patrón `is` extiende el conocido [operador `is`](../../language-reference/keywords/is.md#pattern-matching-with-is) para consultar un objeto más allá de su tipo.


    Pruebe el código siguiente en la ventana del explorador:


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    Cambie la declaración de variable a una cadena:


    ```csharp

    object count = "5";

    ```


    Ahora, la expresión `is` es false, por lo que se ejecuta la rama `else`. Pruebe a cambiar `count` a `number` en la rama else:


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    El código anterior no se compilará porque `number` no se ha asignado en la rama `else`. Solo se ha asignado en la rama `true` de la instrucción `if`.


    El patrón de tipo de expresión `is` es útil cuando tiene un pequeño número de tipos para la prueba. A menudo, deberá probar varios tipos. Para ello, se requiere la instrucción `switch` de coincidencia de patrones.
- title: Coincidencia de patrones con la instrucción switch
  durationInMinutes: 2
  content: >
    La *expresión de coincidencia* tiene una sintaxis conocida, que se basa en la instrucción `switch` que ya forma parte del lenguaje C#. Comencemos con una pequeña muestra basada en la sintaxis de expresión `is` que vio en la página anterior:


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    El código anterior comprueba si hay un elemento `int` o `null`. Todos los demás tipos han alcanzado el caso predeterminado. Agregue las dos líneas siguientes para comprobar el comportamiento:


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    La expresión `switch` convertirá un tipo que acepta valores NULL en su tipo correspondiente. Agregue lo siguiente para llevar a cabo una comprobación:


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    Puede agregar cualquier número de expresiones de patrón de tipo diferentes a las instrucciones switch. Agréguelas antes del caso `null`:


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    Para asegurarse de que funcionen, agregue las pruebas siguientes:


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    Las expresiones de coincidencia también admiten constantes. Esto puede ahorrar tiempo al no tener en cuenta casos sencillos:


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    Debe agregar el caso anterior *antes* de la expresión `case int:`. Si lo agrega después de ese caso, el compilador le advertirá de que ya lo ha controlado un caso anterior.


    Puede agregar una cláusula `when` a cualquier caso de patrón para probar otras condiciones que no sean un tipo o un valor constante. Para probarlo, agregue el caso siguiente encima del caso `string` general:


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    Pruébelo con algo parecido al código siguiente:


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    La nueva sintaxis de expresiones de coincidencia de patrones facilita la creación de algoritmos de distribución mediante una sintaxis clara y concisa basados en un tipo del objeto o en otras propiedades. Las expresiones de coincidencia de patrones habilitan estas construcciones en tipos de datos que no se relacionan por herencia.


    Puede obtener más información sobre la coincidencia de patrones en el artículo sobre la [coincidencia de patrones en C#](../../pattern-matching.md).
- title: Optimización del almacenamiento en memoria mediante el uso de devoluciones y variables locales de tipo ref
  durationInMinutes: 2
  content: >
    Esta característica habilita algoritmos que usan y devuelven referencias a variables definidas en otro lugar. Por ejemplo, puede trabajar con matrices de gran tamaño y buscar una sola ubicación con determinadas características. Un método devolvería los dos índices a una sola ubicación en la matriz:


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    Puede probar este método con el código siguiente:


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    Este método `Find` devuelve los índices al elemento de la matriz. Esto lleva a los autores de llamadas a escribir código que use esos índices para desreferenciar la matriz y modificar un solo elemento. Es preferible escribir un método que devuelva una *referencia* al elemento de la matriz que quiere cambiar.


    Repasaremos una serie de cambios que muestran la característica local ref y cómo crear un método que devuelva una referencia al almacenamiento interno. Por el camino, conocerá las reglas de devolución de ref y la característica de la variable local ref que impide que accidentalmente se haga un uso incorrecto de ella.


    Empiece por modificar la declaración de método `Find` para que devuelva un `ref int` en lugar de una tupla.


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    Modifique la instrucción return para devolver el elemento en los índices correctos:


    ```csharp

    return matrix[i,j];

    ```


    Cambie el valor devuelto final para que en su lugar inicie una excepción:


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    Tenga en cuenta que esto no llevará a cabo la compilación. La declaración de método indica un valor devuelto de tipo `ref`, pero la instrucción return especifica una devolución de valor. Debe agregar la palabra clave `ref` para cada instrucción return. Esto indica una devolución por referencia y ayuda a que los desarrolladores que lean el código después recuerden que el método devuelve por referencia:


    ```csharp

    return ref matrix[i,j];

    ```


    Ahora que el método devuelve una referencia al valor entero de la matriz, hay que modificar dónde se llama. La declaración `var` indica que `valItem` es ahora un elemento `int`, en lugar de una tupla. Cambie el código de llamada a lo siguiente:


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    La segunda instrucción `WriteLine` del ejemplo anterior imprime el valor `42`, no `24`. La variable `valItem` es un `int`, no un `ref int`. La palabra clave `var` permite que el compilador especifique el tipo, pero no agregará implícitamente el modificador `ref`. En su lugar, el valor al que hace referencia el `ref return` se *copia* en la variable a la izquierda de la asignación. La variable no es una variable local `ref`.


    Para modificar la referencia devuelta, debe agregar el modificador `ref` a la declaración de variable local antes de la llamada a `Find` para convertir la variable en una referencia cuando el valor devuelto sea una referencia. Modifique el código de prueba en el explorador para que coincida con lo siguiente:


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return object by reference")]


    Ahora, la segunda instrucción `WriteLine` del ejemplo anterior imprime el valor `24`, que indica que se ha modificado el almacenamiento en la matriz. La variable local se ha declarado con el modificador `ref` y tomará un valor devuelto `ref`. Debe inicializar una variable `ref` cuando se declara; no puede separar la declaración de la inicialización.


    El lenguaje C# tiene otras tres reglas que protegen del uso incorrecto de las variables locales y devoluciones de `ref`:


    * No se puede asignar un valor devuelto del método estándar para una variable local `ref`.

    * No puede devolver un `ref` a una variable cuya duración se extiende más allá de la ejecución del método.

    * Las `ref` locales y las devoluciones no se pueden usar con métodos asíncronos.


    La incorporación de variables locales ref y devoluciones de ref permite usar algoritmos que resultan más eficientes si se evita copiar los valores o se realizan operaciones de desreferencia varias veces.


    Para más información, consulte el artículo sobre la [palabra clave ref](../../language-reference/keywords/ref.md).
- title: Minimización del acceso al código con funciones locales
  durationInMinutes: 2
  content: "Ahora puede declarar funciones locales anidadas dentro de otras funciones. Esto le permite minimizar la visibilidad de estas funciones. Existen tres casos de uso obvios para las funciones locales:\n\n- Funciones recursivas.\n- Métodos de iterador.\n- Métodos asincrónicos.\n\nComencemos con los métodos recursivos. Pruebe el código siguiente en el explorador para calcular `6!` (factorial):\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\nLas funciones locales son una excelente manera de implementar algoritmos recursivos. Otros usos comunes son para los métodos de iterador públicos y los métodos asincrónicos públicos. Ambos tipos de métodos generan código que informa de errores más tarde de lo que los programadores podrían esperar. En el caso de los métodos de iterador, las excepciones solo se observan al llamar a código que enumera la secuencia devuelta. En el caso de los métodos asincrónicos, las excepciones solo se observan cuando se espera al `Task` devuelto.\n\nLos métodos de iterador son más fáciles de examinar en el explorador, así que vamos a usarlos en este escenario. Pruebe el siguiente código que llama a un método de iterador en el explorador:\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\nEjecute el código. Observe que la excepción se produce cuando el código empieza a iterar el segundo conjunto de resultados. El código que itera el primer conjunto de resultados ya se ha ejecutado. Este ejemplo es pequeño y no cambia las estructuras de datos, por lo que no provoca daños y es fácil de corregir. En cambio, en un programa más grande, en el que los dos objetos iteradores pueden crearse en métodos secundarios diferentes, la causa principal podría ser difícil encontrar. Si el primer método de iterador ha cambiado el estado de los datos, podría incluso dañar los datos. Conviene que la excepción se produzca de inmediato, antes de llevar a cabo ningún trabajo. Puede refactorizar el código para que el método público valide todos los argumentos y una función local genere la enumeración:\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\nLa versión anterior deja claro que hace referencia al método local solo en el contexto del método externo. Las reglas para las funciones locales también garantizan que un desarrollador no pueda llamar accidentalmente a la función local desde otra ubicación de la clase y omitir la validación del argumento.\n\nLa misma técnica se puede emplear con métodos `async` para asegurarse de que las excepciones derivadas de la validación de argumentos se inician antes de comenzar el trabajo asincrónico.\n\n> [!NOTE]\n> Algunos de los diseños que se admiten con funciones locales también se podrían realizar con *expresiones lambda*. Si le interesa, puede [obtener más información sobre las diferencias](../../local-functions-vs-lambdas.md).\n"
- content: >
    Ha terminado de examinar las principales características nuevas de C# 7. Ahora pruébelas en sus aplicaciones. Puede ver la lista completa en el artículo sobre las [novedades de C# 7](../../whats-new/csharp-7.md).
